{"ast":null,"code":"import React,{useEffect,useState}from'react';import MetricCard from'./MetricCard';import FilterBar from'./FilterBar';import'../Styling/DashboardOverview.css';import'../Styling/FilterBar.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DashboardOverview=()=>{const[data,setData]=useState(null);useEffect(()=>{fetch('/api/isp-data/')// Make sure this matches your actual API endpoint\n.then(response=>response.json()).then(data=>setData(data))// Store the API data in the state\n.then(data=>{console.log('Fetched this data: ',data.download_speed);// Log the data to inspect its structure\nsetData(data);}).catch(error=>console.error('Error fetching data:',error));},[]);// Check if data is available before rendering the MetricCards\nif(!data){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});// Add a loading indicator until data is fetched\n}return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-overview\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Historical Dashboard Overview\"}),/*#__PURE__*/_jsx(FilterBar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"card-grid\",children:[/*#__PURE__*/_jsx(MetricCard,{title:\"Average Latency\",value:`${data.average_latency||'N/A'} ms`}),/*#__PURE__*/_jsx(MetricCard,{title:\"Download Speed\",value:`${data.download_speed||'N/A'} Mbps`}),/*#__PURE__*/_jsx(MetricCard,{title:\"Upload Speed\",value:`${data.upload_speed||'N/A'} Mbps`}),/*#__PURE__*/_jsx(MetricCard,{title:\"Packet Loss\",value:`${data.packet_loss||'N/A'}%`}),/*#__PURE__*/_jsx(MetricCard,{title:\"Top 3 ISPs\",value:Array.isArray(data.top_isps)?data.top_isps.join(', '):'N/A'}),/*#__PURE__*/_jsx(MetricCard,{title:\"Highest Latency ISP\",value:data.highest_latency_isp||'N/A'})]})]});};export default DashboardOverview;","map":{"version":3,"names":["React","useEffect","useState","MetricCard","FilterBar","jsx","_jsx","jsxs","_jsxs","DashboardOverview","data","setData","fetch","then","response","json","console","log","download_speed","catch","error","children","className","title","value","average_latency","upload_speed","packet_loss","Array","isArray","top_isps","join","highest_latency_isp"],"sources":["C:/Users/fabri/Envs/npip/network_platform_react/src/Components/DashboardOverview.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport MetricCard from './MetricCard';\r\nimport FilterBar from './FilterBar';\r\nimport '../Styling/DashboardOverview.css';\r\nimport '../Styling/FilterBar.css';\r\n\r\nconst DashboardOverview = () => {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch('/api/isp-data/')  // Make sure this matches your actual API endpoint\r\n      .then(response => response.json())\r\n      .then(data => setData(data))  // Store the API data in the state\r\n      .then(data => {\r\n        console.log('Fetched this data: ',data.download_speed);  // Log the data to inspect its structure\r\n        setData(data);\r\n      })\r\n      .catch(error => console.error('Error fetching data:', error));\r\n  }, []);\r\n\r\n  // Check if data is available before rendering the MetricCards\r\n  if (!data) {\r\n    return <div>Loading...</div>;  // Add a loading indicator until data is fetched\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard-overview\">\r\n      <h1>Historical Dashboard Overview</h1>\r\n      <FilterBar />\r\n      <div className=\"card-grid\">\r\n        <MetricCard title=\"Average Latency\" value={`${data.average_latency || 'N/A'} ms`} />\r\n        <MetricCard title=\"Download Speed\" value={`${data.download_speed || 'N/A'} Mbps`} />\r\n        <MetricCard title=\"Upload Speed\" value={`${data.upload_speed || 'N/A'} Mbps`} />\r\n        <MetricCard title=\"Packet Loss\" value={`${data.packet_loss || 'N/A'}%`} />\r\n        <MetricCard title=\"Top 3 ISPs\" value={Array.isArray(data.top_isps) ? data.top_isps.join(', ') : 'N/A'} />\r\n        <MetricCard title=\"Highest Latency ISP\" value={data.highest_latency_isp || 'N/A'} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardOverview;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,UAAU,KAAM,cAAc,CACrC,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,kCAAkC,CACzC,MAAO,0BAA0B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAElC,KAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,CAC9B,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAEtCD,SAAS,CAAC,IAAM,CACdW,KAAK,CAAC,gBAAgB,CAAG;AAAA,CACtBC,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACH,IAAI,EAAIC,OAAO,CAACD,IAAI,CAAC,CAAG;AAAA,CAC7BG,IAAI,CAACH,IAAI,EAAI,CACZM,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAACP,IAAI,CAACQ,cAAc,CAAC,CAAG;AACzDP,OAAO,CAACD,IAAI,CAAC,CACf,CAAC,CAAC,CACDS,KAAK,CAACC,KAAK,EAAIJ,OAAO,CAACI,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAAC,CACjE,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,GAAI,CAACV,IAAI,CAAE,CACT,mBAAOJ,IAAA,QAAAe,QAAA,CAAK,YAAU,CAAK,CAAC,CAAG;AACjC,CAEA,mBACEb,KAAA,QAAKc,SAAS,CAAC,oBAAoB,CAAAD,QAAA,eACjCf,IAAA,OAAAe,QAAA,CAAI,+BAA6B,CAAI,CAAC,cACtCf,IAAA,CAACF,SAAS,GAAE,CAAC,cACbI,KAAA,QAAKc,SAAS,CAAC,WAAW,CAAAD,QAAA,eACxBf,IAAA,CAACH,UAAU,EAACoB,KAAK,CAAC,iBAAiB,CAACC,KAAK,CAAE,GAAGd,IAAI,CAACe,eAAe,EAAI,KAAK,KAAM,CAAE,CAAC,cACpFnB,IAAA,CAACH,UAAU,EAACoB,KAAK,CAAC,gBAAgB,CAACC,KAAK,CAAE,GAAGd,IAAI,CAACQ,cAAc,EAAI,KAAK,OAAQ,CAAE,CAAC,cACpFZ,IAAA,CAACH,UAAU,EAACoB,KAAK,CAAC,cAAc,CAACC,KAAK,CAAE,GAAGd,IAAI,CAACgB,YAAY,EAAI,KAAK,OAAQ,CAAE,CAAC,cAChFpB,IAAA,CAACH,UAAU,EAACoB,KAAK,CAAC,aAAa,CAACC,KAAK,CAAE,GAAGd,IAAI,CAACiB,WAAW,EAAI,KAAK,GAAI,CAAE,CAAC,cAC1ErB,IAAA,CAACH,UAAU,EAACoB,KAAK,CAAC,YAAY,CAACC,KAAK,CAAEI,KAAK,CAACC,OAAO,CAACnB,IAAI,CAACoB,QAAQ,CAAC,CAAGpB,IAAI,CAACoB,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC,CAAG,KAAM,CAAE,CAAC,cACzGzB,IAAA,CAACH,UAAU,EAACoB,KAAK,CAAC,qBAAqB,CAACC,KAAK,CAAEd,IAAI,CAACsB,mBAAmB,EAAI,KAAM,CAAE,CAAC,EACjF,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAvB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}